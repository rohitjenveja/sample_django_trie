This trie implementation is unique because the source data, a CSV, has 
data which can contains wildcards for a field called VSN. 

Example VSN: AAA*AA123456

The user will search based upon a complete VSN (i.e. AAAAAA123456 etc.,) 
and then I retrive the  result that matches and contains the fewest 
wildcards.

The current trie can handle ~10 million VSNs on a decent macbook pro.
For reference, on my MBP, it took about 1.5 minutes to create a trie with ten
million results (see load_test.py to test it out). Lookups were very fast
after the trie had been created.
